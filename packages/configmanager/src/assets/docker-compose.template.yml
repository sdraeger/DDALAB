services:
  redis:
    image: redis:7.4.1-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - internal
    restart: unless-stopped

  ddalab:
    image: sdraeger1/ddalab:latest
    platform: linux/amd64
    env_file:
      - ./.env
    environment:
      DDALAB_AUTH_MODE: ${DDALAB_AUTH_MODE:-local}
    ports:
      - "${WEB_PORT:-3000}:3000"
      - "${API_PORT:-8001}:8001"
    volumes:
      - type: bind
        source: ${ALLOWED_DIR_SOURCE:-./data}
        target: ${ALLOWED_DIR_TARGET:-/app/data}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://0.0.0.0:3000 && curl -f http://0.0.0.0:8001/api/config | grep -q 'auth_mode.*local'"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.api.entrypoints=websecure" 
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api.loadbalancer.server.port=8001"
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - internal
    restart: unless-stopped

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - internal
    restart: unless-stopped

  traefik:
    image: traefik:v3.3.5
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TRAEFIK_PASSWORD_HASH=${TRAEFIK_PASSWORD_HASH}
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./certs:/etc/traefik/certs:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./dynamic:/etc/traefik/dynamic:ro
      - ./traefik-logs:/traefik.log
      - type: bind
        source: ./acme.json
        target: /acme.json
    depends_on:
      postgres:
        condition: service_healthy
      ddalab:
        condition: service_started
    restart: unless-stopped
    networks:
      - internal
    labels:
      - "traefik.enable=true"

  jaeger:
    image: jaegertracing/jaeger:2.0.0
    ports:
      - "4317:4317"
      - "4318:4318"
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - internal

  prometheus:
    image: prom/prometheus:v3.2.1
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      - prometheus_tmp:/tmp
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - "--query.timeout=2m"
      - "--query.max-concurrency=20"
      - "--storage.tsdb.no-lockfile"
    restart: unless-stopped
    networks:
      - internal

  grafana:
    image: grafana/grafana:11.6.0
    ports:
      - "3005:3005"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - internal

volumes:
  prometheus_data:
  prometheus_tmp:
  grafana_data:
  postgres-data:
  minio-data:
  redis-data:

networks:
  internal:
    driver: bridge