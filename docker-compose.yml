services:
  minio:
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - ./minio-data:/data
    networks:
      - internal

  web:
    build:
      context: ./ddalab-web
      dockerfile: Dockerfile
    env_file:
      - ./ddalab-web/.env.local
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 5s
      timeout: 3s
      retries: 5
    depends_on:
      - api
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      # Default catch-all for web
      - "traefik.http.routers.web.rule=Host(`localhost`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      # Specific Next.js API routes
      - "traefik.http.routers.web-auth.rule=Host(`localhost`) && PathPrefix(`/api/auth/`)"
      - "traefik.http.routers.web-auth.entrypoints=websecure"
      - "traefik.http.routers.web-auth.tls=true"
      - "traefik.http.routers.web-auth.service=web"
      - "traefik.http.routers.web-api.rule=Host(`localhost`) && Path(`/api`)"
      - "traefik.http.routers.web-api.entrypoints=websecure"
      - "traefik.http.routers.web-api.tls=true"
      - "traefik.http.routers.web-api.service=web"
      - "traefik.http.routers.web-debug.rule=Host(`localhost`) && PathPrefix(`/api/debug`)"
      - "traefik.http.routers.web-debug.entrypoints=websecure"
      - "traefik.http.routers.web-debug.tls=true"
      - "traefik.http.routers.web-debug.service=web"

  api:
    build:
      context: .
      dockerfile: server/Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    expose:
      - "8002"
    environment:
      env_file: .env
      REDIS_URL: ${REDIS_URL}
      MINIO_HOST: "minio:9000"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      DDALAB_ALLOWED_DIRS: ${DDALAB_ALLOWED_DIRS}
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus
    volumes:
      - ./prometheus_metrics:/tmp/prometheus
      - ${DDALAB_ALLOWED_DIRS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      # General API route
      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=8001"
      # Specific tickets route
      - "traefik.http.routers.api-tickets.rule=Host(`localhost`) && PathPrefix(`/api/tickets`)"
      - "traefik.http.routers.api-tickets.entrypoints=websecure"
      - "traefik.http.routers.api-tickets.tls=true"
      - "traefik.http.routers.api-tickets.service=api"
      # GraphQL route
      - "traefik.http.routers.api-graphql.rule=Host(`localhost`) && PathPrefix(`/graphql`)"
      - "traefik.http.routers.api-graphql.entrypoints=websecure"
      - "traefik.http.routers.api-graphql.tls=true"
      - "traefik.http.routers.api-graphql.service=api"

  redis:
    image: redis:7.0
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    ports:
      - "6379:6379"
    networks:
      - internal

  postgres:
    image: postgres:16 # Use a specific version for stability
    environment:
      POSTGRES_USER: ${DDALAB_DB_USER}
      POSTGRES_PASSWORD: ${DDALAB_DB_PASSWORD}
      POSTGRES_DB: ${DDALAB_DB_NAME}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${DDALAB_DB_USER}",
          "-d",
          "${DDALAB_DB_NAME}",
        ]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - ./postgres-data:/var/lib/postgresql/data # Persist data
    ports:
      - "5432:5432" # Expose Postgres port (optional for local access)
    networks:
      - internal

  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/traefik/certs:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik-logs:/traefik.log
      - ./acme.json:/acme.json
    depends_on:
      postgres:
        condition: service_healthy
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicAuth.users=${TRAEFIK_PASSWORD_HASH}"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    restart: unless-stopped
    networks:
      - internal

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3005:3005"
    volumes:
      - ./grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - internal

volumes:
  prometheus_data:
  grafana_data:

networks:
  internal:
    driver: bridge
