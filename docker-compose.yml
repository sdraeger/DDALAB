# DDALAB Production Docker Compose
# This is the main deployment file for DDALAB
# 
# Quick Start:
# 1. Copy .env.production.example to .env
# 2. Edit .env to change all passwords
# 3. Run: docker-compose up -d
# 4. Access: https://localhost

services:
  # Main DDALAB application (includes API + Web frontend)
  ddalab:
    image: ${DDALAB_IMAGE:-sdraeger1/ddalab:latest}
    platform: linux/amd64
    container_name: ddalab
    restart: unless-stopped
    environment:
      # Database connection
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-ddalab}
      - DB_PASSWORD=${DB_PASSWORD:-ddalab}
      - DB_NAME=${DB_NAME:-ddalab}
      # MinIO storage
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      # Redis cache
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Authentication
      - DDALAB_AUTH_MODE=${DDALAB_AUTH_MODE:-local}
      - JWT_SECRET_KEY=${DDALAB_JWT_SECRET_KEY:-CHANGE_ME_IN_PRODUCTION}
      # DDA Engine
      - DDA_BINARY_PATH=${DDALAB_DDA_BINARY_PATH:-/app/bin/run_DDA_ASCII}
      # Data directories
      - DATA_DIR=/app/data
      - ALLOWED_DIRS=/app/data
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - ddalab-network
    labels:
      # Traefik configuration for HTTPS
      - "traefik.enable=true"
      # Web30 interface routing
      - "traefik.http.routers.ddalab-web30.rule=Host(`localhost`) && PathPrefix(`/web30`)"
      - "traefik.http.routers.ddalab-web30.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web30.tls=true"
      - "traefik.http.routers.ddalab-web30.priority=100"
      - "traefik.http.routers.ddalab-web30.service=ddalab-web30"
      - "traefik.http.routers.ddalab-web30.middlewares=web30-stripprefix"
      - "traefik.http.middlewares.web30-stripprefix.stripprefix.prefixes=/web30"
      - "traefik.http.services.ddalab-web30.loadbalancer.server.port=3001"
      # Web30 assets routing - route /web30-assets to web30 service  
      - "traefik.http.routers.ddalab-web30-assets.rule=Host(`localhost`) && PathPrefix(`/web30-assets`)"
      - "traefik.http.routers.ddalab-web30-assets.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web30-assets.tls=true"
      - "traefik.http.routers.ddalab-web30-assets.priority=100"
      - "traefik.http.routers.ddalab-web30-assets.service=ddalab-web30-assets"
      - "traefik.http.routers.ddalab-web30-assets.middlewares=web30-assets-stripprefix"
      - "traefik.http.middlewares.web30-assets-stripprefix.stripprefix.prefixes=/web30-assets"
      - "traefik.http.services.ddalab-web30-assets.loadbalancer.server.port=3001"
      # Web30 specific assets routing - route web30-specific assets to web30
      - "traefik.http.routers.ddalab-web30-specific.rule=Host(`localhost`) && PathRegexp(`^/_next/static/(css/ff370fba21abc9eb\\.css|css/d062c0149ade33ed\\.css|chunks/webpack-62929d1849f2de72\\.js|chunks/4bd1b696-c023c6e3521b1417\\.js|chunks/app/layout-c946412b78f516b4\\.js|chunks/255-40634877ae3e8e9d\\.js|chunks/382-2ba84b7bacea0237\\.js|chunks/main-app-40e5fb769bb8164f\\.js|chunks/app/dashboard/page-e46aba4944e6582f\\.js|chunks/framework-fffd2192ef0a6589\\.js|chunks/main-327a9076db36026f\\.js|chunks/polyfills-42372ed130431b0a\\.js|chunks/app/page-f47082ca351a8369\\.js)`)"
      - "traefik.http.routers.ddalab-web30-specific.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web30-specific.tls=true"
      - "traefik.http.routers.ddalab-web30-specific.priority=50"
      - "traefik.http.routers.ddalab-web30-specific.service=ddalab-web30-specific"
      - "traefik.http.services.ddalab-web30-specific.loadbalancer.server.port=3001"
      # Web20 assets routing - route /_next to web20 service (default)
      - "traefik.http.routers.ddalab-web20-assets.rule=Host(`localhost`) && PathPrefix(`/_next/static/chunks/19-`)"
      - "traefik.http.routers.ddalab-web20-assets.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web20-assets.tls=true"
      - "traefik.http.routers.ddalab-web20-assets.priority=10"
      - "traefik.http.routers.ddalab-web20-assets.service=ddalab-web20"
      # Web20 interface routing (default) - explicitly exclude _next fallback paths
      - "traefik.http.routers.ddalab-web20.rule=Host(`localhost`) && !PathPrefix(`/api`) && !PathPrefix(`/api-backend`) && !PathPrefix(`/docs`) && !PathPrefix(`/graphql`) && !PathPrefix(`/web30`) && !PathPrefix(`/web30-assets`) && !PathPrefix(`/_next`)"
      - "traefik.http.routers.ddalab-web20.entrypoints=websecure"
      - "traefik.http.routers.ddalab-web20.tls=true"
      - "traefik.http.routers.ddalab-web20.priority=1"
      - "traefik.http.routers.ddalab-web20.service=ddalab-web20"
      - "traefik.http.services.ddalab-web20.loadbalancer.server.port=3000"
      # API routing through HTTPS
      - "traefik.http.routers.ddalab-api.rule=Host(`localhost`) && (PathPrefix(`/api`) || PathPrefix(`/api-backend`) || PathPrefix(`/docs`) || PathPrefix(`/graphql`))"
      - "traefik.http.routers.ddalab-api.entrypoints=websecure"
      - "traefik.http.routers.ddalab-api.tls=true"
      - "traefik.http.routers.ddalab-api.priority=100"
      - "traefik.http.routers.ddalab-api.service=ddalab-api"
      - "traefik.http.services.ddalab-api.loadbalancer.server.port=8001"
      # Middleware to rewrite paths
      - "traefik.http.routers.ddalab-api.middlewares=api-rewrite"
      - "traefik.http.middlewares.api-rewrite.replacepathregex.regex=^/api-backend/(.*)"
      - "traefik.http.middlewares.api-rewrite.replacepathregex.replacement=/api/$$1"

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: ddalab-postgres
    restart: unless-stopped
    environment:
      # Create the database and user directly
      POSTGRES_USER: ${DB_USER:-ddalab}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ddalab}
      POSTGRES_DB: ${DB_NAME:-ddalab}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ddalab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ddalab}"]
      interval: 5s
      timeout: 3s
      retries: 10

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: ddalab-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - ddalab-network

  # MinIO object storage
  minio:
    image: minio/minio:latest
    container_name: ddalab-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio-data:/data
    ports:
      - "9001:9001"  # MinIO console (optional)
    networks:
      - ddalab-network

  # Traefik reverse proxy for SSL/HTTPS
  traefik:
    image: traefik:v3.0
    container_name: ddalab-traefik
    restart: unless-stopped
    command:
      # Enable Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # Enable file provider for TLS configuration
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      # Configure entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.api.address=:8001"
      # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Disable dashboard for security
      - "--api.dashboard=false"
    ports:
      - "80:80"
      - "443:443"
      - "8001:8001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/traefik/certs:ro
      - ./dynamic:/etc/traefik/dynamic:ro
    networks:
      - ddalab-network
    depends_on:
      - ddalab

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ddalab-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ddalab-network
    profiles:
      - monitoring

  # Optional: Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ddalab-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_HTTP_PORT=3005
    ports:
      - "3005:3005"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ddalab-network
    profiles:
      - monitoring

networks:
  ddalab-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  minio-data:
  prometheus-data:
  grafana-data: