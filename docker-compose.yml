services:
  minio:
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - ./minio-data:/data
    networks:
      - internal

  web:
    build:
      context: ./ddalab-web
      dockerfile: Dockerfile
    env_file:
      - ./ddalab-web/.env.local
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 120s
      timeout: 3s
      retries: 5
    depends_on:
      - api
    networks:
      - internal

  api:
    build:
      context: .
      dockerfile: server/Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 120s
      timeout: 3s
      retries: 5
    ports:
      - "8001:8001"
    # expose:
    # - "8002"
    environment:
      env_file: .env
      REDIS_URL: ${REDIS_URL}
      MINIO_HOST: "minio:9000"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      DDALAB_ALLOWED_DIRS: ${DDALAB_ALLOWED_DIRS}
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus
    volumes:
      - ./prometheus_metrics:/tmp/prometheus
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - internal

  redis:
    image: redis:7.0
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    ports:
      - "6379:6379"
    networks:
      - internal

  celery:
    build:
      context: .
      dockerfile: server/Dockerfile
    command: celery -A server.celery_app worker -l info -Q celery,dda
    environment:
      BROKER_URL: ${CELERY_BROKER_URL}
    volumes:
      - ${DDALAB_ALLOWED_DIRS}
    depends_on:
      - redis
    networks:
      - internal

  postgres:
    image: postgres:16 # Use a specific version for stability
    environment:
      POSTGRES_USER: ${DDALAB_DB_USER}
      POSTGRES_PASSWORD: ${DDALAB_DB_PASSWORD}
      POSTGRES_DB: ${DDALAB_DB_NAME}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${DDALAB_DB_USER}",
          "-d",
          "${DDALAB_DB_NAME}",
        ]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - ./postgres-data:/var/lib/postgresql/data # Persist data
    ports:
      - "5432:5432" # Expose Postgres port (optional for local access)
    networks:
      - internal

  nginx:
    image: nginx:latest
    ports:
      - "443:443" # Map host 443 to container 443
      - "80:80" # Map host 80 to container 80
    depends_on:
      # web:
      #   condition: service_healthy
      # api:
      #   condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro # Mount Nginx config
      - ./nginx-proxy/certs:/etc/nginx/certs:ro # Mount self-signed certificates
    restart: unless-stopped
    networks:
      - internal

  flower:
    image: mher/flower:2.0.1
    command: celery --broker=${CELERY_BROKER_URL} flower --port=5555
    ports:
      - "5555:5555" # Expose Flower's default port
    depends_on:
      - redis # We need Redis
    environment:
      CELERY_BROKER_URL: ${REDIS_URL}
    networks:
      - internal

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus # Persistent storage for Prometheus data
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    restart: unless-stopped
    networks:
      - internal

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3005:3005"
    volumes:
      - grafana_data:/var/lib/grafana # Persistent storage for Grafana data
    environment:
      - GF_SECURITY_ADMIN_USER=admin # Default Grafana admin username
      - GF_SECURITY_ADMIN_PASSWORD=admin # Default Grafana admin password
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - internal

volumes:
  prometheus_data:
  grafana_data:

networks:
  internal:
    driver: bridge
