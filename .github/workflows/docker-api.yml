name: Build and Push API Docker Image

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'packages/api/**'
      - 'docker/api/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-api.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'packages/api/**'
      - 'docker/api/**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: sdraeger1/ddalab-api
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            # Set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Set branch name as tag
            type=ref,event=branch
            # Set git short SHA as tag
            type=sha,prefix={{branch}}-
            # Set custom tag if provided
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag != '' }}
            # Set semantic version if tag is pushed
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: echo ${{ steps.docker_build.outputs.digest }}

  test-image:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Docker image
        run: |
          # Pull the newly built image
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
          
          # Start temporary MinIO for testing
          docker run -d --name minio-test \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            quay.io/minio/minio server /data
          
          # Test API container startup
          docker run -d --name ddalab-api-test \
            --link minio-test:minio \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            -e SECRET_KEY=test-secret-key \
            -e MINIO_ENDPOINT=minio:9000 \
            -e MINIO_ACCESS_KEY=minioadmin \
            -e MINIO_SECRET_KEY=minioadmin \
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
          
          # Wait and validate startup
          sleep 8
          
          # Check for successful application loading
          LOGS=$(docker logs ddalab-api-test 2>&1)
          
          if echo "$LOGS" | grep -q "GraphQL router loaded successfully"; then
            echo "âœ“ FastAPI application loads successfully"
          else
            echo "âœ— FastAPI application failed to load" && exit 1
          fi
          
          if echo "$LOGS" | grep -q "Started server process"; then
            echo "âœ“ Uvicorn server starts with uvloop"
          else
            echo "âœ— Uvicorn server failed to start" && exit 1
          fi
          
          if echo "$LOGS" | grep -q "Created MinIO bucket"; then
            echo "âœ“ MinIO connectivity confirmed"
          else
            echo "âœ— MinIO connectivity failed" && exit 1
          fi
          
          # Cleanup
          docker stop ddalab-api-test minio-test
          docker rm ddalab-api-test minio-test

      - name: Notify success
        if: success()
        run: |
          echo "âœ… Docker image successfully built and pushed to ${{ env.DOCKER_IMAGE }}"
          echo "ðŸ“¦ Tags: ${{ steps.meta.outputs.tags }}"