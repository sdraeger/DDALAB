name: 'Release Tauri App'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
  push:
    tags:
      - 'v*'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ]; then
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            # Check if it's a prerelease (contains alpha, beta, rc)
            if [[ $VERSION =~ (alpha|beta|rc) ]]; then
              echo "prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "prerelease=false" >> $GITHUB_OUTPUT
            fi
          fi

  create-release:
    needs: check-version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x86_64'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x86_64'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x86_64'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './packages/ddalab-tauri/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Update Tauri config version
        working-directory: packages/ddalab-tauri
        run: |
          # Update version in tauri.conf.json
          node -e "
            const fs = require('fs');
            const config = JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json', 'utf8'));
            config.version = '${{ needs.check-version.outputs.version }}';
            fs.writeFileSync('src-tauri/tauri.conf.json', JSON.stringify(config, null, 2));
          "

          # Update version in Cargo.toml
          sed -i.bak 's/^version = ".*"/version = "${{ needs.check-version.outputs.version }}"/' src-tauri/Cargo.toml

          # Update version in package.json
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '${{ needs.check-version.outputs.version }}';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v${{ needs.check-version.outputs.version }}
          releaseName: 'DDALAB v${{ needs.check-version.outputs.version }}'
          releaseBody: |
            # DDALAB v${{ needs.check-version.outputs.version }}

            ## What's New
            - Built with Tauri v2
            - Cross-platform desktop application for EEG analysis
            - Delay Differential Analysis (DDA) support
            - Self-contained Docker stack management

            ## Downloads
            Choose the appropriate installer for your platform below.

            ### Installation Instructions

            **macOS**: Download the .dmg file, open it, and drag DDALAB to your Applications folder.

            **Linux**: Download the .AppImage file, make it executable (`chmod +x`), and run it. Alternatively, use the .deb package for Debian-based distributions.

            **Windows**: Download and run the .msi installer.

            ## System Requirements
            - macOS 10.15 or later (Apple Silicon and Intel supported)
            - Linux: Ubuntu 20.04 or later (or equivalent)
            - Windows 10 or later (x64)

            ## Docker Requirements
            DDALAB requires Docker to be installed and running for the backend API services.
            - **macOS/Windows**: Docker Desktop
            - **Linux**: Docker Engine + Docker Compose

            ---

            See the [README](https://github.com/sdraeger/DDALAB/blob/main/README.md) for full installation and usage instructions.
          releaseDraft: true
          prerelease: ${{ needs.check-version.outputs.prerelease }}
          includeDebug: false
          includeRelease: true
          projectPath: packages/ddalab-tauri
          args: ${{ matrix.args }}

  finalize-release:
    needs: [check-version, create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Publish the draft release
          gh release edit v${{ needs.check-version.outputs.version }} --draft=false

          echo "âœ… Release v${{ needs.check-version.outputs.version }} published successfully!"
          echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.check-version.outputs.version }}"
