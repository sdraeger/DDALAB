version: 2.1

executors:
  windows:
    machine:
      image: windows-server-2019-vs2019:stable
    resource_class: windows.large
  linux:
    docker:
      - image: cimg/node:18.20
    resource_class: medium
  macos:
    macos:
      xcode: 15.2.0
    resource_class: macos.m1.medium.gen1

jobs:
  build-windows:
    executor: windows
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Install Node.js
          command: |
            nvm install 18
            nvm use 18
      - run:
          name: Install root dependencies
          command: npm install
      - run:
          name: Build ConfigManager only
          command: |
            cd packages/configmanager
            npm install
            npm run build
      - run:
          name: Update version with build number
          command: |
            cd packages/configmanager
            $buildNum = $env:CIRCLE_BUILD_NUM
            $branch = $env:CIRCLE_BRANCH
            $script = @"
            const fs = require('fs');
            const p = require('./package.json');
            const buildNum = '$buildNum';
            const branch = '$branch';
            const currentVersion = p.version.replace(/-.*/, '');
            if (branch === 'main') {
              p.version = currentVersion + '-dev.' + buildNum;
            } else {
              const safeBranch = branch.replace(/[^a-zA-Z0-9-]/g, '-').substring(0, 20);
              p.version = currentVersion + '-' + safeBranch + '.' + buildNum;
            }
            fs.writeFileSync('./package.json', JSON.stringify(p, null, 2) + '\n');
            console.log('Version updated to ' + p.version);
            "@
            node -e $script
          shell: powershell.exe
      - run:
          name: Verify and Set AWS Credentials
          command: |
            echo "Checking AWS credentials..."
            if ([string]::IsNullOrEmpty($env:AWS_ACCESS_KEY_ID)) {
              echo "ERROR: AWS_ACCESS_KEY_ID is not set"
              exit 1
            }
            if ([string]::IsNullOrEmpty($env:AWS_SECRET_ACCESS_KEY)) {
              echo "ERROR: AWS_SECRET_ACCESS_KEY is not set"
              exit 1
            }
            echo "AWS credentials are set"
          shell: powershell.exe
      - run:
          name: Publish ConfigManager
          command: |
            cd packages/configmanager
            set AWS_DEFAULT_REGION=us-east-1
            npm run publish:dev:win

  build-linux:
    executor: linux
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libgtk-3-0 libnotify-dev libgconf-2-4 libatk-bridge2.0-0 libx11-xcb1 libxss1 libnss3 libgbm-dev
      - run:
          name: Install root dependencies
          command: npm install
      - run:
          name: Build ConfigManager only
          command: |
            cd packages/configmanager
            npm install
            npm run build
      - run:
          name: Update version with build number
          command: |
            cd packages/configmanager
            BUILD_NUM=${CIRCLE_BUILD_NUM}
            BRANCH=${CIRCLE_BRANCH}
            CURRENT_VERSION=$(node -p "require('./package.json').version.replace(/-.*/, '')")
            
            if [ "$BRANCH" = "main" ]; then
              NEW_VERSION="${CURRENT_VERSION}-dev.${BUILD_NUM}"
            else
              SAFE_BRANCH=$(echo $BRANCH | sed 's/[^a-zA-Z0-9-]/-/g' | cut -c1-20)
              NEW_VERSION="${CURRENT_VERSION}-${SAFE_BRANCH}.${BUILD_NUM}"
            fi
            
            node -e "const fs=require('fs'); const p=require('./package.json'); p.version='$NEW_VERSION'; fs.writeFileSync('./package.json', JSON.stringify(p, null, 2)+'\n');"
            echo "Version updated to $NEW_VERSION"
      - run:
          name: Verify and Set AWS Credentials
          command: |
            echo "Checking AWS credentials..."
            if [ -z "$AWS_ACCESS_KEY_ID" ]; then
              echo "ERROR: AWS_ACCESS_KEY_ID is not set"
              exit 1
            fi
            if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
              echo "ERROR: AWS_SECRET_ACCESS_KEY is not set"
              exit 1
            fi
            echo "AWS credentials are set"
      - run:
          name: Publish ConfigManager
          command: |
            cd packages/configmanager
            export AWS_DEFAULT_REGION=us-east-1
            npm run publish:dev:linux

  build-macos:
    executor: macos
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Fix Python environment
          command: |
            # Remove any Python version constraints
            find . -name ".python-version" -delete
            # Ensure pyenv uses system python
            echo 'export PYENV_VERSION=system' >> $BASH_ENV
            # Install Python 3.10 via pyenv to match what's expected
            pyenv install 3.10 || true
            pyenv global 3.10 || pyenv global system
      - run:
          name: Install Node.js
          command: |
            brew install node@18
            echo 'export PATH="/opt/homebrew/opt/node@18/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            node --version
            npm --version
      - run:
          name: Install root dependencies
          command: |
            source $BASH_ENV
            npm install
      - run:
          name: Build ConfigManager only
          command: |
            source $BASH_ENV
            cd packages/configmanager
            npm install
            npm run build
      - run:
          name: Update version with build number
          command: |
            source $BASH_ENV
            cd packages/configmanager
            BUILD_NUM=${CIRCLE_BUILD_NUM}
            BRANCH=${CIRCLE_BRANCH}
            CURRENT_VERSION=$(node -p "require('./package.json').version.replace(/-.*/, '')")
            
            if [ "$BRANCH" = "main" ]; then
              NEW_VERSION="${CURRENT_VERSION}-dev.${BUILD_NUM}"
            else
              SAFE_BRANCH=$(echo $BRANCH | sed 's/[^a-zA-Z0-9-]/-/g' | cut -c1-20)
              NEW_VERSION="${CURRENT_VERSION}-${SAFE_BRANCH}.${BUILD_NUM}"
            fi
            
            node -e "const fs=require('fs'); const p=require('./package.json'); p.version='$NEW_VERSION'; fs.writeFileSync('./package.json', JSON.stringify(p, null, 2)+'\n');"
            echo "Version updated to $NEW_VERSION"
      - run:
          name: Verify and Set AWS Credentials
          command: |
            echo "Checking AWS credentials..."
            if [ -z "$AWS_ACCESS_KEY_ID" ]; then
              echo "ERROR: AWS_ACCESS_KEY_ID is not set"
              exit 1
            fi
            if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
              echo "ERROR: AWS_SECRET_ACCESS_KEY is not set"
              exit 1
            fi
            echo "AWS credentials are set"
      - run:
          name: Publish ConfigManager
          command: |
            source $BASH_ENV
            cd packages/configmanager
            export AWS_DEFAULT_REGION=us-east-1
            npm run publish:dev:mac

  build-docker:
    docker:
      - image: cimg/node:18.20
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Validate deployment configuration
          command: |
            echo "Validating Docker Compose configuration..."
            docker compose config --quiet
            echo "✅ Docker Compose configuration is valid"
            
            echo "Validating Docker Swarm stack configurations..."
            # Validate production swarm stack
            if [ -f docker-stack.yml ]; then
              docker compose -f docker-stack.yml config --quiet
              echo "✅ Docker Swarm production stack is valid"
            else
              echo "⚠️ docker-stack.yml not found"
            fi
            
            # Validate development swarm stack
            if [ -f docker-stack.dev.yml ]; then
              docker compose -f docker-stack.dev.yml config --quiet
              echo "✅ Docker Swarm development stack is valid"
            else
              echo "⚠️ docker-stack.dev.yml not found"
            fi
      - run:
          name: Build Docker image
          command: |
            # Extract version info from commit
            VERSION=$(echo ${CIRCLE_SHA1} | cut -c1-7)
            BRANCH=${CIRCLE_BRANCH}
            
            # Determine tags based on branch
            if [ "$BRANCH" = "main" ]; then
              TAGS="sdraeger1/ddalab:latest,sdraeger1/ddalab:${BRANCH}-${VERSION}"
            else
              TAGS="sdraeger1/ddalab:${BRANCH}-${VERSION}"
            fi
            
            # Build multi-architecture image
            docker buildx create --use --name multiarch-builder || true
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --tag sdraeger1/ddalab:${BRANCH}-${VERSION} \
              --file ./Dockerfile \
              --push=false \
              .
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push Docker image
          command: |
            VERSION=$(echo ${CIRCLE_SHA1} | cut -c1-7)
            BRANCH=${CIRCLE_BRANCH}
            
            # Build and push with appropriate tags
            if [ "$BRANCH" = "main" ]; then
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --tag sdraeger1/ddalab:latest \
                --tag sdraeger1/ddalab:${BRANCH}-${VERSION} \
                --tag sdraeger1/ddalab:build-${CIRCLE_BUILD_NUM} \
                --file ./Dockerfile \
                --push \
                .
            else
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --tag sdraeger1/ddalab:${BRANCH}-${VERSION} \
                --tag sdraeger1/ddalab:${BRANCH}-build-${CIRCLE_BUILD_NUM} \
                --file ./Dockerfile \
                --push \
                .
            fi

  test-windows:
    executor: windows
    working_directory: ~/project
    environment:
      NODE_OPTIONS: "--max-old-space-size=6144"
      PLAYWRIGHT_WORKERS: "1"
    steps:
      - checkout
      - run:
          name: Install Node.js
          command: |
            nvm install 18
            nvm use 18
      - run:
          name: Install root dependencies
          command: npm install
      - run:
          name: Install ConfigManager dependencies
          command: |
            cd packages/configmanager
            npm install
      - run:
          name: Install Playwright browsers
          command: |
            cd packages/configmanager
            npx playwright install --with-deps
      - run:
          name: Build ConfigManager for testing
          command: |
            cd packages/configmanager
            npm run build
      - run:
          name: Run acceptance tests
          command: |
            cd packages/configmanager
            set NODE_OPTIONS=--max-old-space-size=6144
            set PLAYWRIGHT_WORKERS=1
            set PWTEST_SKIP_TEST_OUTPUT=1
            npm run test:ci
      - store_test_results:
          path: packages/configmanager/test-results
      - store_artifacts:
          path: packages/configmanager/test-results
          destination: test-results-windows

  test-linux:
    executor: linux
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Install system dependencies for Electron
          command: |
            # Retry apt-get update with different mirrors if needed
            sudo apt-get update || (
              echo "Switching to archive mirrors..."
              sudo sed -i 's|http://archive.ubuntu.com|http://us.archive.ubuntu.com|g' /etc/apt/sources.list
              sudo apt-get update
            )
            sudo apt-get install -y libgtk-3-0 libnotify-dev libgconf-2-4 libatk-bridge2.0-0 libx11-xcb1 libxss1 libnss3 libgbm-dev xvfb || true
            # Install critical dependencies individually if bulk install fails
            sudo apt-get install -y libgtk-3-0 || true
            sudo apt-get install -y libnss3 || true
            sudo apt-get install -y libgbm-dev || true
            sudo apt-get install -y xvfb || true
      - run:
          name: Install root dependencies
          command: npm install
      - run:
          name: Install ConfigManager dependencies
          command: |
            cd packages/configmanager
            npm install
      - run:
          name: Install Playwright browsers
          command: |
            cd packages/configmanager
            npx playwright install --with-deps
      - run:
          name: Build ConfigManager for testing
          command: |
            cd packages/configmanager
            npm run build
      - run:
          name: Run acceptance tests
          command: |
            cd packages/configmanager
            export PLAYWRIGHT_WORKERS=1
            export NODE_OPTIONS="--max-old-space-size=4096"
            xvfb-run -a npm run test:ci
      - store_test_results:
          path: packages/configmanager/test-results
      - store_artifacts:
          path: packages/configmanager/test-results
          destination: test-results-linux

  test-macos:
    executor: macos
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Fix Python environment
          command: |
            find . -name ".python-version" -delete
            echo 'export PYENV_VERSION=system' >> $BASH_ENV
            pyenv install 3.10 || true
            pyenv global 3.10 || pyenv global system
      - run:
          name: Install Node.js
          command: |
            brew install node@18
            echo 'export PATH="/opt/homebrew/opt/node@18/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            node --version
            npm --version
      - run:
          name: Install root dependencies
          command: |
            source $BASH_ENV
            npm install
      - run:
          name: Install ConfigManager dependencies
          command: |
            source $BASH_ENV
            cd packages/configmanager
            npm install
      - run:
          name: Install Playwright browsers
          command: |
            source $BASH_ENV
            cd packages/configmanager
            npx playwright install --with-deps
      - run:
          name: Build ConfigManager for testing
          command: |
            source $BASH_ENV
            cd packages/configmanager
            npm run build
      - run:
          name: Run acceptance tests
          command: |
            source $BASH_ENV
            cd packages/configmanager
            npm run test:e2e
      - store_test_results:
          path: packages/configmanager/test-results
      - store_artifacts:
          path: packages/configmanager/test-results
          destination: test-results-macos

  orchestrator-e2e-windows:
    executor: windows
    working_directory: ~/project
    environment:
      NODE_OPTIONS: "--max-old-space-size=8192"
      CI: "true"
      ELECTRON_IS_TESTING: "true"
      ELECTRON_DISABLE_SANDBOX: "1"
      PLAYWRIGHT_WORKERS: "1"
    steps:
      - checkout
      - run:
          name: Install Node.js
          command: |
            nvm install 18
            nvm use 18
      - run:
          name: Install root dependencies
          command: npm install
      - run:
          name: Install ConfigManager dependencies
          command: |
            cd packages/configmanager
            npm install
      - run:
          name: Install Playwright browsers
          command: |
            cd packages/configmanager
            npx playwright install chromium --with-deps
      - run:
          name: Build ConfigManager for testing
          command: |
            cd packages/configmanager
            npm run build
      - run:
          name: Check Docker availability
          command: |
            docker --version || echo "Docker not available"
            docker info || echo "Docker not running"
          continue_on_error: true
      - run:
          name: Run Orchestrator E2E tests
          command: |
            cd packages/configmanager
            set DDALAB_E2E_PLATFORM=win32
            set PLAYWRIGHT_HTML_REPORT=playwright-report/orchestrator-windows
            npm run test:e2e -- --config=playwright-orchestrator.config.ts --reporter=html
          timeout: 480
      - store_test_results:
          path: packages/configmanager/test-results
      - store_artifacts:
          path: packages/configmanager/test-results
          destination: orchestrator-e2e-windows
      - store_artifacts:
          path: packages/configmanager/playwright-report
          destination: orchestrator-report-windows

  orchestrator-e2e-linux:
    executor: linux
    working_directory: ~/project
    environment:
      CI: "true"
      ELECTRON_IS_TESTING: "true"
      ELECTRON_DISABLE_SANDBOX: "1"
    steps:
      - checkout
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - run:
          name: Install system dependencies for Electron
          command: |
            sudo apt-get update
            sudo apt-get install -y libgtk-3-0 libnotify-dev libgconf-2-4 libatk-bridge2.0-0 libx11-xcb1 libxss1 libnss3 libgbm-dev xvfb
      - run:
          name: Install root dependencies
          command: npm install
      - run:
          name: Install ConfigManager dependencies
          command: |
            cd packages/configmanager
            npm install
      - run:
          name: Install Playwright browsers
          command: |
            cd packages/configmanager
            npx playwright install chromium --with-deps
      - run:
          name: Build ConfigManager for testing
          command: |
            cd packages/configmanager
            npm run build
      - run:
          name: Check Docker availability
          command: |
            docker --version
            docker info
      - run:
          name: Run Orchestrator E2E tests
          command: |
            cd packages/configmanager
            export DDALAB_E2E_PLATFORM=linux
            export PLAYWRIGHT_HTML_REPORT=playwright-report/orchestrator-linux
            export DISPLAY=:99
            Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
            sleep 3
            npm run test:e2e -- --config=playwright-orchestrator.config.ts --reporter=html
          timeout: 420
      - store_test_results:
          path: packages/configmanager/test-results
      - store_artifacts:
          path: packages/configmanager/test-results
          destination: orchestrator-e2e-linux
      - store_artifacts:
          path: packages/configmanager/playwright-report
          destination: orchestrator-report-linux

  orchestrator-e2e-macos:
    executor: macos
    working_directory: ~/project
    environment:
      CI: "true"
      ELECTRON_IS_TESTING: "true"
      ELECTRON_DISABLE_SANDBOX: "1"
    steps:
      - checkout
      - run:
          name: Fix Python environment
          command: |
            find . -name ".python-version" -delete
            echo 'export PYENV_VERSION=system' >> $BASH_ENV
            pyenv install 3.10 || true
            pyenv global 3.10 || pyenv global system
      - run:
          name: Install Node.js
          command: |
            brew install node@18
            echo 'export PATH="/opt/homebrew/opt/node@18/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            node --version
            npm --version
      - run:
          name: Check Docker availability
          command: |
            source $BASH_ENV
            # Check if Docker is already available
            if command -v docker &> /dev/null && docker info &> /dev/null; then
              echo "Docker is already installed and running"
              docker --version
              exit 0
            fi
            
            # Try to install Docker Desktop (may fail in CI due to GUI requirements)
            echo "Attempting to install Docker Desktop..."
            if brew install --cask docker-desktop 2>/dev/null; then
              echo "Docker Desktop installed"
              
              # Try various methods to start Docker
              for app_name in "Docker Desktop" "Docker" "Docker.app"; do
                if open -a "$app_name" 2>/dev/null; then
                  echo "Opened $app_name"
                  break
                fi
              done
              
              # Brief wait for Docker to initialize
              sleep 10
            fi
            
            # Check if Docker is available after installation attempt
            if command -v docker &> /dev/null && docker info &> /dev/null; then
              echo "Docker is now available"
              docker --version
            else
              echo "Docker is not available in CI environment - tests will run without Docker"
              echo "export SKIP_DOCKER_TESTS=true" >> $BASH_ENV
            fi
      - run:
          name: Install root dependencies
          command: |
            source $BASH_ENV
            npm install
      - run:
          name: Install ConfigManager dependencies
          command: |
            source $BASH_ENV
            cd packages/configmanager
            npm install
      - run:
          name: Install Playwright browsers
          command: |
            source $BASH_ENV
            cd packages/configmanager
            npx playwright install chromium --with-deps
      - run:
          name: Build ConfigManager for testing
          command: |
            source $BASH_ENV
            cd packages/configmanager
            npm run build
      - run:
          name: Run Orchestrator E2E tests
          command: |
            source $BASH_ENV
            cd packages/configmanager
            export DDALAB_E2E_PLATFORM=darwin
            export PLAYWRIGHT_HTML_REPORT=playwright-report/orchestrator-macos
            npm run test:e2e -- --config=playwright-orchestrator.config.ts --reporter=html
          timeout: 480
      - store_test_results:
          path: packages/configmanager/test-results
      - store_artifacts:
          path: packages/configmanager/test-results
          destination: orchestrator-e2e-macos
      - store_artifacts:
          path: packages/configmanager/playwright-report
          destination: orchestrator-report-macos

workflows:
  test-and-build:
    jobs:
      # Test jobs run on all branches
      - test-windows:
          filters:
            branches:
              ignore: []
      - test-linux:
          filters:
            branches:
              ignore: []
      - test-macos:
          filters:
            branches:
              ignore: []
      
      # Orchestrator E2E tests - PAUSED: Phase out orchestrator in favor of Docker Swarm
      # - orchestrator-e2e-windows:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #           - develop
      # - orchestrator-e2e-linux:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #           - develop
      # - orchestrator-e2e-macos:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #           - develop
      
      # Build jobs only run on main branch and require tests to pass
      - build-windows:
          context: aws-credentials
          requires:
            - test-windows
          filters:
            branches:
              only:
                - main
      - build-linux:
          context: aws-credentials
          requires:
            - test-linux
          filters:
            branches:
              only:
                - main
      - build-macos:
          context: aws-credentials
          requires:
            - test-macos
          filters:
            branches:
              only:
                - main
      - build-docker:
          context: dockerhub-credentials
          filters:
            branches:
              only:
                - main
                - develop
