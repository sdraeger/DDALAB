# Development Stack - Infrastructure Services Only
# Run API and Web20 locally, connect to these services
# Usage: docker stack deploy -c docker-stack.dev.yml ddalab-dev

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    networks:
      - internal
    ports:
      # Expose to host for local development
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-ddalab_db}
      POSTGRES_USER: ${DB_USER:-ddalab}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ddalab_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${DB_USER:-ddalab}",
          "-d",
          "${DB_NAME:-ddalab_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.4-alpine
    networks:
      - internal
    ports:
      # Expose to host for local development
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    networks:
      - internal
      - traefik_public
    ports:
      # Expose to host for local development
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-ddalab}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-ddalab_dev_key}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_CONSOLE_URL:-http://localhost:9001}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik_public
        # MinIO Console for development
        - "traefik.http.routers.minio-dev.rule=Host(`minio.dev.localhost`) || Host(`localhost`) && PathPrefix(`/minio`)"
        - traefik.http.routers.minio-dev.entrypoints=web
        - traefik.http.routers.minio-dev.service=minio-dev
        - traefik.http.services.minio-dev.loadbalancer.server.port=9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traefik Reverse Proxy (Development Mode)
  traefik:
    image: traefik:v3.3
    networks:
      - traefik_public
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 8080
        published: 8080
        mode: host
    command:
      # API and dashboard (enabled for dev)
      - --api.dashboard=true
      - --api.debug=true
      - --api.insecure=true
      # Swarm provider (replaces docker.swarmMode in v3)
      - --providers.swarm=true
      - --providers.swarm.exposedbydefault=false
      - --providers.swarm.network=traefik_public
      # Entrypoints
      - --entrypoints.web.address=:80
      # Development logging
      - --log.level=DEBUG
      - --accesslog=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus (Development Monitoring)
  prometheus:
    image: prom/prometheus:v2.48.0
    networks:
      - internal
      - traefik_public
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus_dev_config
        target: /etc/prometheus/prometheus.yml
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik_public
        - "traefik.http.routers.prometheus-dev.rule=Host(`prometheus.dev.localhost`) || Host(`localhost`) && PathPrefix(`/prometheus`)"
        - traefik.http.routers.prometheus-dev.entrypoints=web
        - traefik.http.services.prometheus-dev.loadbalancer.server.port=9090

  # Jaeger (Tracing)
  jaeger:
    image: jaegertracing/jaeger:2.0.0
    networks:
      - internal
      - traefik_public
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik_public
        - "traefik.http.routers.jaeger-dev.rule=Host(`jaeger.dev.localhost`) || Host(`localhost`) && PathPrefix(`/jaeger`)"
        - traefik.http.routers.jaeger-dev.entrypoints=web
        - traefik.http.services.jaeger-dev.loadbalancer.server.port=16686

  # Grafana (Development Dashboards)
  grafana:
    image: grafana/grafana:11.6.0
    networks:
      - internal
      - traefik_public
    ports:
      - "3001:3000" # Use 3001 to avoid conflict with web20
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik_public
        - "traefik.http.routers.grafana-dev.rule=Host(`grafana.dev.localhost`) || Host(`localhost`) && PathPrefix(`/grafana`)"
        - traefik.http.routers.grafana-dev.entrypoints=web
        - traefik.http.services.grafana-dev.loadbalancer.server.port=3000

networks:
  internal:
    driver: overlay
    attachable: true
  traefik_public:
    external: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

configs:
  prometheus_dev_config:
    external: true
