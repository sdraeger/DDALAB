# Development Docker Compose
# Usage: docker compose -f docker-compose.dev.yml up

services:
  # Core services
  redis:
    image: redis:7.4.1-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - internal

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USER:-ddalab}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ddalab}
      POSTGRES_DB: ${DB_NAME:-ddalab}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER:-ddalab}", "-d", "${DB_NAME:-ddalab}"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal

  traefik:
    image: traefik:v3.3.5
    environment:
      - TRAEFIK_PASSWORD_HASH=admin:$$apr1$$example$$hashedpassword
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./certs:/etc/traefik/certs:ro
      - ./traefik.dev.yml:/etc/traefik/traefik.yml:ro
      - ./dynamic:/etc/traefik/dynamic:ro
      - ./traefik-logs:/traefik.log
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - type: bind
        source: ./acme.json
        target: /acme.json
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  jaeger:
    image: jaegertracing/jaeger:2.0.0
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    network_mode: host

  prometheus:
    image: prom/prometheus:v3.2.1
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    restart: unless-stopped
    network_mode: host

  grafana:
    image: grafana/grafana:11.6.0
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    restart: unless-stopped
    network_mode: host

  # API Server - runs packages/api/start.sh
  api:
    image: python:3.10-slim
    container_name: ddalab-api
    env_file:
      - .env
      - .env.local
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-ddalab}
      - DB_PASSWORD=${DB_PASSWORD:-ddalab}
      - DB_NAME=${DB_NAME:-ddalab}
      - MINIO_HOST=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONPATH=/app/packages/api
      - PYTHONUNBUFFERED=1
      - ALLOWED_DIRS=/app/data,/tmp
      - DDALAB_AUTH_MODE=${DDALAB_AUTH_MODE:-local}
    ports:
      - "${API_PORT:-8001}:8001"
      - "5678:5678"  # Python debugger port
    volumes:
      - ./packages/api:/app/packages/api
      - ./data:/app/data
    working_dir: /app/packages/api
    command: |
      sh -c "
        apt-get update && apt-get install -y curl
        pip install --upgrade pip
        pip install -r requirements.txt
        echo 'Starting API server with hot reload...'
        python -m uvicorn main:app --host 0.0.0.0 --port 8001 --reload --reload-dir /app/packages/api
      "
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Web20 Dashboard - runs npm run dev in packages/web20
  web20:
    image: node:20-slim
    container_name: ddalab-web20
    env_file:
      - .env
      - .env.local
    environment:
      - NODE_ENV=development
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - API_URL=http://api:8001
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-dev-secret-key}
    ports:
      - "${WEB20_PORT:-3000}:3000"
    volumes:
      - ./packages/web20:/app/packages/web20
      - ./packages/shared:/app/packages/shared
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - ./turbo.json:/app/turbo.json
      - /app/node_modules
      - /app/packages/web20/node_modules
      - /app/packages/web20/.next
    working_dir: /app
    command: |
      sh -c "
        cd /app && npm install
        cd /app/packages/web20
        echo 'Starting web20 server with hot reload...'
        npm run dev
      "
    depends_on:
      - api
    networks:
      - internal

volumes:
  prometheus_data:
  prometheus_metrics:
  grafana_data:
  postgres-data:
  minio-data:
  redis-data:

networks:
  internal:
    driver: bridge
