# Isolated Development Environment for DDALAB
# This provides a completely isolated environment with no external dependencies
# All services run in containers with fixed configurations

services:
  # PostgreSQL Database - Isolated instance
  postgres-dev:
    image: postgres:16-alpine
    container_name: ddalab-postgres-isolated
    environment:
      POSTGRES_USER: ddalab_dev
      POSTGRES_PASSWORD: isolated_dev_pass
      POSTGRES_DB: ddalab_isolated
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres-isolated:/var/lib/postgresql/data
    networks:
      - ddalab-isolated
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ddalab_dev", "-d", "ddalab_isolated"]
      interval: 5s
      timeout: 3s
      retries: 10

  # Redis Cache - Isolated instance
  redis-dev:
    image: redis:7-alpine
    container_name: ddalab-redis-isolated
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    volumes:
      - redis-isolated:/data
    networks:
      - ddalab-isolated

  # MinIO Object Storage - Isolated instance
  minio-dev:
    image: minio/minio:latest
    container_name: ddalab-minio-isolated
    environment:
      MINIO_ROOT_USER: isolated_minio
      MINIO_ROOT_PASSWORD: isolated_minio_pass
    ports:
      - "9002:9000"  # Different ports to avoid conflicts
      - "9003:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio-isolated:/data
    networks:
      - ddalab-isolated
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # API Server with hot reload
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.isolated-dev
      target: api-dev
    container_name: ddalab-api-isolated
    environment:
      # Core settings
      ENVIRONMENT: development
      DEBUG: "true"
      RELOAD: "true"

      # Database - internal container names
      DB_HOST: postgres-dev
      DB_PORT: 5432
      DB_USER: ddalab_dev
      DB_PASSWORD: isolated_dev_pass
      DB_NAME: ddalab_isolated

      # MinIO - internal container names
      MINIO_HOST: minio-dev:9000
      MINIO_ACCESS_KEY: isolated_minio
      MINIO_SECRET_KEY: isolated_minio_pass

      # Redis - internal container names
      REDIS_HOST: redis-dev
      REDIS_PORT: 6379

      # Auth
      AUTH_MODE: local
      JWT_SECRET_KEY: isolated_dev_jwt_secret_key_32chars

      # Data paths
      DATA_DIR: /app/data
      ALLOWED_DIRS: /app/data
      DDA_BINARY_PATH: /app/bin/run_DDA_ASCII

      # API settings
      API_HOST: 0.0.0.0
      API_PORT: 8001

      # Python path
      PYTHONPATH: /app/packages/api
    # No external port exposure - accessed through traefik
    volumes:
      - ./packages/api:/app/packages/api:cached
      - ./data:/app/data
      - ./bin:/app/bin:ro
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_started
      minio-dev:
        condition: service_healthy
    networks:
      - ddalab-isolated
    command: ["sh", "-c", "cd /app && python -m packages.api.apply_sql_files --dbname ddalab_isolated --user ddalab_dev --password isolated_dev_pass --host postgres-dev --port 5432 --email admin@isolated.dev --first_name Admin --last_name User && uvicorn packages.api.main:app --host 0.0.0.0 --port 8001 --reload"]
    labels:
      - "traefik.enable=true"
      # API routing
      - "traefik.http.routers.api-isolated.rule=Host(`localhost`) && (PathPrefix(`/api-backend`) || PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/graphql`))"
      - "traefik.http.routers.api-isolated.entrypoints=web"
      - "traefik.http.routers.api-isolated.priority=100"
      - "traefik.http.routers.api-isolated.service=api-isolated"
      - "traefik.http.services.api-isolated.loadbalancer.server.port=8001"
      # Middleware to rewrite /api-backend to /api
      - "traefik.http.routers.api-isolated.middlewares=api-rewrite"
      - "traefik.http.middlewares.api-rewrite.replacepathregex.regex=^/api-backend/(.*)"
      - "traefik.http.middlewares.api-rewrite.replacepathregex.replacement=/api/$$1"

  # Combined Web Frontend (Web20 + Web30) with hot reload
  web-dev:
    build:
      context: .
      dockerfile: Dockerfile.isolated-dev
      target: web-dev
    container_name: ddalab-web-isolated
    environment:
      NODE_ENV: development
      # Web20 environment
      NEXT_PUBLIC_API_URL: http://localhost:3002
      NEXT_PUBLIC_APP_URL: http://localhost:3002
      NEXTAUTH_URL: http://localhost:3002
      NEXTAUTH_SECRET: isolated_dev_nextauth_secret
      # Web30 environment
      WEB30_BASE_PATH: "true"
      # Internal API URL for server-side calls
      API_URL: http://api-dev:8001
      API_BASE_URL: http://api-dev:8001
    ports:
      - "3000:3000"  # Web20 direct access (for debugging)
      - "3001:3001"  # Web30 direct access (for debugging)
    networks:
      - ddalab-isolated
    volumes:
      - ./packages/web20:/app/packages/web20:cached
      - ./packages/web30:/app/packages/web30:cached
      - ./packages/shared:/app/packages/shared:cached
      - /app/packages/web20/node_modules  # Prevent node_modules overwrite
      - /app/packages/web20/.next  # Prevent .next overwrite
      - /app/packages/web30/node_modules  # Prevent node_modules overwrite
      - /app/packages/web30/.next  # Prevent .next overwrite
    working_dir: /app
    command: ["/app/start-webs.sh"]
    depends_on:
      - api-dev
    labels:
      - "traefik.enable=true"
      # Web30 page routing - basic PathPrefix test
      - "traefik.http.routers.web30-pages-isolated.rule=Host(`localhost`) && PathPrefix(`/web30/`)"
      - "traefik.http.routers.web30-pages-isolated.entrypoints=web"
      - "traefik.http.routers.web30-pages-isolated.priority=200"
      - "traefik.http.routers.web30-pages-isolated.service=web30-isolated"
      - "traefik.http.routers.web30-pages-isolated.middlewares=web30-pages-strip"
      - "traefik.http.middlewares.web30-pages-strip.stripprefix.prefixes=/web30"
      # Web30 assets routing via /web30-assets prefix
      - "traefik.http.routers.web30-assets-isolated.rule=Host(`localhost`) && PathPrefix(`/web30-assets`)"
      - "traefik.http.routers.web30-assets-isolated.entrypoints=web"
      - "traefik.http.routers.web30-assets-isolated.priority=250"
      - "traefik.http.routers.web30-assets-isolated.service=web30-isolated"
      # - "traefik.http.routers.web30-assets-isolated.middlewares=assets-strip-isolated"
      # - "traefik.http.middlewares.assets-strip-isolated.stripprefix.prefixes=/web30-assets"
      # Web20 assets routing - all other Next.js assets
      - "traefik.http.routers.web20-assets-isolated.rule=Host(`localhost`) && PathPrefix(`/_next/`)"
      - "traefik.http.routers.web20-assets-isolated.entrypoints=web"
      - "traefik.http.routers.web20-assets-isolated.priority=100"
      - "traefik.http.routers.web20-assets-isolated.service=web20-isolated"
      # Web20 page routing - default for everything else
      - "traefik.http.routers.web20-pages-isolated.rule=Host(`localhost`) && (!PathPrefix(`/api-backend`) && !PathPrefix(`/docs`) && !PathPrefix(`/graphql`) && !PathPrefix(`/web30`))"
      - "traefik.http.routers.web20-pages-isolated.entrypoints=web"
      - "traefik.http.routers.web20-pages-isolated.priority=10"
      - "traefik.http.routers.web20-pages-isolated.service=web20-isolated"
      # Service definitions
      - "traefik.http.services.web30-isolated.loadbalancer.server.port=3001"
      - "traefik.http.services.web20-isolated.loadbalancer.server.port=3000"

  # Traefik reverse proxy for routing
  traefik-dev:
    image: traefik:v3.0
    container_name: ddalab-traefik-isolated
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.traefik.address=:8080"
    ports:
      - "3002:80"  # Main application port
      - "8081:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ddalab-isolated
    depends_on:
      - web-dev
      - api-dev

networks:
  ddalab-isolated:
    name: ddalab-isolated-network
    driver: bridge

volumes:
  postgres-isolated:
  redis-isolated:
  minio-isolated:
