worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    upstream api_backend {
        # server host.docker.internal:8001;  # API on host (HTTP)
        server api:8001;
        keepalive 32;
    }

    upstream web_backend {
        # server host.docker.internal:3001;  # Next.js dev server on host (HTTP)
        server web:3000;
        keepalive 32;
    }

    # Main server for external access
    server {
        listen 443 ssl;
        # No server_name since no domain

        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Handle /api/auth/... by forwarding to Next.js (HTTP)
        location /api/auth/ {
            proxy_pass http://web_backend/api/auth/;  # Proxy to Next.js on port 3001 (HTTP)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Root API endpoint - route to Next.js
        location = /api {
            proxy_pass http://web_backend/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Debug endpoint - route to Next.js
        location /api/debug {
            proxy_pass http://web_backend/api/debug;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Specific route for tickets - send to API server (HTTP)
        location /api/tickets {
            proxy_pass http://api_backend/api/tickets;  # Proxy to API server (HTTP)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # General API routes - send to backend API (HTTP)
        location /api/ {
            proxy_pass http://api_backend;  # Proxy to API server (HTTP)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # location /api/user-preferences {
        #     proxy_pass http://api_backend/api/user-preferences;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     proxy_set_header Authorization $http_authorization;
        #     proxy_pass_header Authorization;
        # }

        # GraphQL endpoint - send to API server (HTTP)
        location /graphql {
            proxy_pass http://api_backend/graphql;  # Proxy to API server (HTTP)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle all other requests (Next.js app via HTTP)
        location / {
            proxy_pass http://web_backend;  # Proxy to Next.js on port 3001 (HTTP)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        return 301 https://$host$request_uri;
    }
}
