worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    upstream api_backend {
        server host.docker.internal:8001;  # API on host
    }

    upstream web_backend {
        server host.docker.internal:3001;  # Next.js dev server directly on host
    }

    # Map to identify recursive requests
    map $http_x_ddalab_client $is_api_client {
        "1"     1;
        default 0;
    }

    # Main server for external access
    server {
        listen 443 ssl;
        # No server_name since no domain

        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Handle circular redirects - break the loop if we detect it
        if ($is_api_client) {
            return 508 '{"error":"Circular redirect detected","message":"Request loop broken by nginx"}';
        }

        location / {
            proxy_pass http://web_backend;  # Next.js dev server on host:3001 (using HTTP, not HTTPS)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Root API endpoint - route to Next.js
        location = /api {
            proxy_pass http://web_backend/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Debug endpoint - route to Next.js
        location /api/debug {
            proxy_pass http://web_backend/api/debug;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Specific route for tickets - send directly to Next.js
        location /api/tickets {
            # Fix the path to correctly map to the API backend
            proxy_pass https://api_backend/api/tickets;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-DDALAB-Client "1";  # Mark as forwarded to prevent loops
            proxy_ssl_verify off;  # Bypass self-signed cert issues
        }

        # Backend API routes that shouldn't be proxied again
        # location /api/tickets/tickets {
        #     # Direct to API server to prevent proxy loop
        #     proxy_pass https://api_backend/api/tickets/tickets;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     proxy_ssl_verify off;  # Bypass self-signed cert issues
        # }

        # General API routes - send to backend API
        location /api/ {
            # Route API requests to the Python API server
            proxy_pass https://api_backend;  # Remove trailing slash to avoid double slashes in URL
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;  # Bypass self-signed cert issues
        }

        location /graphql {
            proxy_pass https://api_backend/graphql;  # GraphQL on host:8001
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;  # Bypass self-signed cert issues
        }

        # Optional: Proxy to Directus for local access only
        location /directus/ {
            proxy_pass http://host.docker.internal:8055/;  # Directus on host
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            allow 127.0.0.1;  # Restrict to container-local requests
            deny all;         # Block external access
        }
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        return 301 https://$host$request_uri;
    }
}
